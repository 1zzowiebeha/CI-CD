{
    "dependencies": {
        "eslint": "^9.32.0",
        "sass-embedded": "^1.89.2"
    },
    "scripts": {
        "//": "Embed source maps into the css file to avoid current Sass source map removal bug",
        "//": "fail if .sass files are used",
        "scss-watch": "sass --watch --no-indented --embed-source-map src/scss:public/css",
        "//": "does it build all files? yes, even unchanged.",
        "//": "wish there was diff snapshot tracking to check what files needto be compiled.",
        "//": "--update exists, but it will fail if an older timestamped file is used (even if its contents are newer)",
        "//": "we could one day switch to postCSS for its cool features",
        "//": "... such as tree shaking, experimental polyfills, linting, ...?",
        "//": "how to remove all comments from output?",
        "//": "fail is .sass files are used",
        "scss-compile": "sass --no-indented --style=compressed --embed-source-map src/scss:public/css",
        "//": "automatically generate dpi versions of images and link them to where they are used in the html",
        "asset:generate-pictures": "",
        "//": "Detect HTML/asset creation/update/removal, and reflect the changes in ./public/.",
        "asset:copy-state": "copy-and-watch src/**/*.{html,json} src/**/fonts/* dist/",
        "asset:watch": "copy-and-watch --watch src/**/*.{html,json} src/**/{fonts,images}/* dist/",
        "//": "improvement: tree shake with WebPack or Vite",
        "//": "improvement: look through all folders and minify/mangle via Webpack or Vite",
        "//": "improvement: variable substitution doesn't work",
        "//": "--module with --compress|--mangle will implicitly enable --toplevel and strict mode.",
        "//": "    .. This allows for variable mangling at the top level for main module scripts.",
        "js:minify": "terser src/js/main.js --compress --mangle --module --output=public/js/bundle.js",
        "js:eslint": "",
        "js:build": "npm run js:minify && npm run js:lint",
        "dev:watch": "npm run scss-watch && npm run html:watch",
        "prod:build": "npm run scss-compile && npm run prod:js-build"
    }
}


-------------


{
    "dependencies": {
        "eslint": "^9.32.0",
        "sass-embedded": "^1.89.2"
    },
    "//scripts": {
        "scss-*": "Will embed source maps into the .css file to avoid a Sass source map removal detection bug. Command fails if .sass files are used.",
        "scss-compile": "Will build all .scss files even if they are not touched. Maybe --update will allow this to be error-free soon: https://github.com/sass/sass/issues/4105",
        "asset:generate-pictures": "Automatically generate downscaled DPI resolution images and link them to where they are used in the HTML. Might be better suited for Webpack.",
        "asset:*": "Detect HTML/asset creation/update/removal, and reflect the changes in ./public/.",
        "js:minify": "Implicitly uses terser's --toplevel and strict mode due to combination of --module with --compress|--mangle."
    },
    "scripts": {
        "scss-watch": "sass --watch --no-indented --embed-source-map src/scss:public/css",
        "scss-compile": "sass --no-indented --style=compressed --embed-source-map src/scss:public/css",
        
        "asset:generate-pictures": "echo Todo: not yet implemented",
        "asset:copy-state": "npx copy-and-watch src/**/*.{html,json} src/**/fonts/* dist/",
        "asset:watch": "npx copy-and-watch --watch src/**/*.{html,json} src/**/{fonts,images}/* dist/",
        
        "js:minify": "terser src/js/main.js --compress --mangle --module --output=public/js/bundle.js",
        "js:eslint": "",
        "js:build": "npm run js:minify && npm run js:lint",
        "dev:watch": "npm run scss-watch && npm run html:watch",
        "prod:build": "npm run scss-compile && npm run prod:js-build"
    }
}
